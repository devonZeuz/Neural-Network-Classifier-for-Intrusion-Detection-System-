# Complete Project Setup Guide

## 🔧 **Step-by-Step Setup**

### 1. **Repository Setup**
```bash
# Clone your repository
git clone https://github.com/yourusername/iot-intrusion-detection.git
cd iot-intrusion-detection

# Create virtual environment (recommended)
python -m venv venv

# Activate virtual environment
# On Windows:
venv\Scripts\activate
# On macOS/Linux:
source venv/bin/activate
```

### 2. **Install Dependencies**
```bash
# Install required packages
pip install -r requirements.txt

# If you get errors, install individually:
pip install tensorflow>=2.8.0
pip install scikit-learn>=1.0.0
pip install pandas>=1.3.0
pip install numpy>=1.21.0
pip install imbalanced-learn>=0.8.0
pip install matplotlib>=3.5.0
pip install seaborn>=0.11.0
pip install jupyter>=1.0.0
```

### 3. **Download IoT-23 Dataset**

**Option A: Manual Download**
1. Go to: https://www.stratosphereips.org/datasets-iot23
2. Download these specific captures:
   - CTU-IoT-Malware-Capture-34-1
   - CTU-IoT-Malware-Capture-48-1  
   - CTU-IoT-Malware-Capture-60-1
3. Extract to your `data/raw/` folder

**Expected Structure:**
```
data/raw/
├── CTU-IoT-Malware-Capture-34-1/
│   └── bro/
│       └── conn.log.labeled
├── CTU-IoT-Malware-Capture-48-1/
│   └── bro/
│       └── conn.log.labeled
└── CTU-IoT-Malware-Capture-60-1/
    └── bro/
        └── conn.log.labeled
```

### 4. **Test the Setup**

**Quick Test:**
```bash
# Test if everything is installed correctly
python -c "import tensorflow as tf; import pandas as pd; import sklearn; print('✅ All dependencies installed!')"

# Test Jupyter
jupyter notebook --version
```

### 5. **Run the Analysis**

**Option 1: Use Jupyter Notebooks (Easiest)**
```bash
# Start Jupyter
jupyter notebook

# Open any of these notebooks:
# - notebooks/THE BEST FINAL Chatgpt 34-1.ipynb
# - notebooks/THE BEST FINAL Chatgpt 48-1.ipynb
# - notebooks/THE BEST FINAL Chatgpt 60-1.ipynb

# Run cells step by step (Shift + Enter)
```

**Option 2: Use Python Scripts**
```bash
# Basic preprocessing test
python -c "
from src.data_preprocessing import IoTDataPreprocessor
preprocessor = IoTDataPreprocessor()
print('✅ Preprocessing module works!')
"

# Run full analysis (if you have the data)
python src/training.py
```

## 🐛 **Common Issues & Solutions**

### **Issue 1: ModuleNotFoundError**
```bash
# Solution: Make sure you're in the project directory and install missing packages
pip install <missing-package>

# Or add project to Python path
export PYTHONPATH="${PYTHONPATH}:$(pwd)"
```

### **Issue 2: Dataset Not Found**
```bash
# Solution: Check if data files exist
ls -la data/raw/
# Should show the CTU-IoT-Malware-Capture folders
```

### **Issue 3: Memory Issues**
```python
# If you get memory errors, try smaller batch sizes
# In the notebooks, change:
batch_size = 32  # Instead of 256
```

### **Issue 4: Jupyter Kernel Issues**
```bash
# Install Jupyter kernel for your virtual environment
pip install ipykernel
python -m ipykernel install --user --name=venv --display-name "IoT IDS Project"
```

## 📋 **Verification Checklist**

Run this checklist to make sure everything works:

```bash
# ✅ 1. Check Python version
python --version  # Should be 3.8+

# ✅ 2. Check dependencies
python -c "import tensorflow, sklearn, pandas, numpy; print('Dependencies OK')"

# ✅ 3. Check project structure
ls src/  # Should show: data_preprocessing.py, model_architecture.py, etc.

# ✅ 4. Check data directory
ls data/raw/  # Should show CTU-IoT-Malware-Capture folders

# ✅ 5. Test import
python -c "from src.data_preprocessing import IoTDataPreprocessor; print('Imports OK')"

# ✅ 6. Start Jupyter
jupyter notebook  # Should open browser
```

## 🎯 **What You Can Do Now**

### **Immediate Actions:**
1. **Run Existing Notebooks**: Your notebooks are ready to run with the IoT-23 data
2. **Explore Results**: See the confusion matrices and performance metrics
3. **Modify Parameters**: Try different neural network architectures
4. **Generate Reports**: Use the evaluation module to create detailed reports

### **Next Steps:**
1. **Real-time Testing**: Deploy the model for live network monitoring
2. **Feature Engineering**: Add new features or improve existing ones
3. **Model Optimization**: Try ensemble methods or hyperparameter tuning
4. **Documentation**: Add more detailed documentation and examples

### **Research Extensions:**
1. **Compare with Other Algorithms**: Test against SVM, Random Forest, etc.
2. **Transfer Learning**: Apply to other IoT datasets
3. **Adversarial Testing**: Test robustness against adversarial attacks
4. **Edge Deployment**: Optimize for IoT gateway deployment

## 📚 **Learning Resources**

- **TensorFlow Documentation**: https://www.tensorflow.org/tutorials
- **Scikit-learn User Guide**: https://scikit-learn.org/stable/user_guide.html
- **IoT-23 Dataset Paper**: https://www.stratosphereips.org/datasets-iot23
- **Jupyter Notebook Basics**: https://jupyter-notebook.readthedocs.io/

## 💡 **Pro Tips**

1. **Start Small**: Begin with one dataset (CTU-34-1) before running all three
2. **Monitor Resources**: Watch memory usage, especially with large datasets  
3. **Save Often**: Save models and results frequently during training
4. **Version Control**: Commit changes regularly to track your progress
5. **Document Everything**: Add comments and markdown cells to your notebooks